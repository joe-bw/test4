plugins {
    id 'com.jetbrains.python.envs' version '0.0.26'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android-extensions'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30

    if (project.hasProperty("testBuildType")) {
        // Allowing to configure the test build type via command line flag (./gradlew -PtestBuildType=beta ..)
        // in order to run UI tests against other build variants than debug in automation.
        testBuildType project.property("testBuildType")
    }

    defaultConfig {
        applicationId "org.mozilla.sorizava"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 27
        versionName "2.2.2"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    // We have a three dimensional build configuration:
    // BUILD TYPE (debug, release) X PRODUCT FLAVOR (focus, klar)
    buildTypes {
        release {
            // We allow disabling optimization by passing `-PdisableOptimization` to gradle. This is used
            // in automation for UI testing non-debug builds.
            shrinkResources !project.hasProperty("disableOptimization")
            minifyEnabled !project.hasProperty("disableOptimization")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['release']

            if (gradle.hasProperty("localProperties.autosignReleaseWithDebugKey")) {
                println ("All builds will be automatically signed with the debug key")
                signingConfig signingConfigs.debug
            }

            if (gradle.hasProperty("localProperties.debuggable")) {
                println ("All builds will be debuggable")
                debuggable true
            }
        }
        debug {
            matchingFallbacks = ['debug']
        }
        beta {
            initWith release
            applicationIdSuffix ".beta"
        }
        nightly {
            initWith release
            signingConfig signingConfigs.debug
        }
    }
    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        compose true
        viewBinding true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = Versions.compose_version
    }

    flavorDimensions "product"

    productFlavors {
        focus {
            dimension "product"
            applicationIdSuffix ".focus"
        }

        klar {
            dimension "product"
            applicationIdSuffix ".klar"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    sourceSets {
        test {
            resources {
                // Make the default asset folder available as test resource folder. Robolectric seems
                // to fail to read assets for our setup. With this we can just read the files directly
                // and do not need to rely on Robolectric.
                srcDir "${projectDir}/src/main/assets/"
            }
        }

        // Release
        focusRelease.root = 'src/focusRelease'
        klarRelease.root = 'src/klarRelease'

        // Debug
        focusDebug.root = 'src/focusDebug'
        klarDebug.root = 'src/klarDebug'

        // Nightly
        focusNightly.root = 'src/focusNightly'
        klarNightly.root = 'src/klarNightly'
    }

    packagingOptions {
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/proguard/coroutines.pro'
    }

    // 뷰 바인딩
    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            allWarningsAsErrors = false
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
            jvmTarget = '1.8'
        }
}

// -------------------------------------------------------------------------------------------------
// Generate Kotlin code for the Focus Glean metrics.
// -------------------------------------------------------------------------------------------------
apply plugin: "org.mozilla.telemetry.glean-gradle-plugin"

repositories {
    flatDir {
        dirs 'libs'
    }

    maven {
        url 'https://maven.mozilla.org/maven2/'
    }
}


configurations {
    // There's an interaction between Gradle's resolution of dependencies with different types
    // (@jar, @aar) for `implementation` and `testImplementation` and with Android Studio's built-in
    // JUnit test runner.  The runtime classpath in the built-in JUnit test runner gets the
    // dependency from the `implementation`, which is type @aar, and therefore the JNA dependency
    // doesn't provide the JNI dispatch libraries in the correct Java resource directories.  I think
    // what's happening is that @aar type in `implementation` resolves to the @jar type in
    // `testImplementation`, and that it wins the dependency resolution battle.
    //
    // A workaround is to add a new configuration which depends on the @jar type and to reference
    // the underlying JAR file directly in `testImplementation`.  This JAR file doesn't resolve to
    // the @aar type in `implementation`.  This works when invoked via `gradle`, but also sets the
    // correct runtime classpath when invoked with Android Studio's built-in JUnit test runner.
    // Success!
    jnaForTest
}

dependencies {

    implementation Dependencies.androidx_appcompat
    implementation Dependencies.androidx_browser
    implementation Dependencies.androidx_cardview
    implementation Dependencies.androidx_compose_ui
    implementation Dependencies.androidx_compose_ui_tooling
    implementation Dependencies.androidx_compose_foundation
    implementation Dependencies.androidx_compose_material
    implementation Dependencies.androidx_compose_runtime_livedata
    implementation Dependencies.androidx_core_ktx
    implementation Dependencies.androidx_lifecycle_extensions
    implementation Dependencies.androidx_palette
    implementation Dependencies.androidx_preferences
    implementation Dependencies.androidx_recyclerview

    implementation Dependencies.google_material

    implementation 'io.sentry:sentry-android:1.7.21'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'com.google.android.play:core:1.10.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    compileOnly 'net.jcip:jcip-annotations:1.0'
    implementation("com.google.code.findbugs:jsr305:3.0.2")

    implementation "org.yaml:snakeyaml:1.24:android"

    implementation 'javax.inject:javax.inject:1'

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation 'com.squareup.okhttp3:okhttp:3.14.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'

    // https://mvnrepository.com/artifact/com.github.warkiz.tickseekbar/tickseekbar
    implementation("com.github.warkiz.tickseekbar:tickseekbar:0.1.4")

    implementation(name:'geckoview-all-m', ext:'aar')

    implementation(name:'browser-engine-gecko-release', ext:'aar')

 //   implementation "org.mozilla.components:browser-engine-gecko:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-domains:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-errorpages:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-icons:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-menu:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-state:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-toolbar:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:concept-awesomebar:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:concept-engine:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:concept-fetch:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:concept-menu:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:compose-awesomebar:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:feature-awesomebar:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-app-links:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-customtabs:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-contextmenu:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-downloads:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-findinpage:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-prompts:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-session:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-search:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-tabs:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-toolbar:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-top-sites:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:lib-crash:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:lib-state:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:service-glean:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:service-location:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:support-ktx:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:support-utils:${AndroidComponents.VERSION}"

    implementation "org.mozilla.components:ui-autocomplete:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:ui-colors:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:ui-icons:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-webcompat:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-webcompat-reporter:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:support-webextensions:${AndroidComponents.VERSION}"

    implementation project(':service-telemetry')

    implementation Dependencies.kotlin_stdlib
    implementation Dependencies.kotlin_coroutines

    focusImplementation 'com.adjust.sdk:adjust-android:4.12.0'
    focusImplementation 'com.android.installreferrer:installreferrer:1.1' // Required by Adjust

    jnaForTest "net.java.dev.jna:jna:${jna_version}@jar"
    testImplementation files(configurations.jnaForTest.copyRecursive().files)
    testImplementation "org.mozilla.telemetry:glean-forUnitTests:${project.ext.glean_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.1"
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"
    testImplementation Dependencies.testing_robolectric
    testImplementation Dependencies.testing_mockito
    testImplementation Dependencies.testing_coroutines
    testImplementation Dependencies.androidx_arch_core_testing
    testImplementation "org.mozilla.components:support-test:${AndroidComponents.VERSION}"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"

    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation "org.mozilla.components:lib-fetch-okhttp:${AndroidComponents.VERSION}"

    androidTestImplementation "tools.fastlane:screengrab:2.0.0"
    // This Falcon version is added to maven central now required for Screengrab
    implementation 'com.jraska:falcon:2.2.0'

    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.2.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    /** Viewpager 2 */
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.tbuonomo:dotsindicator:4.2'

    /** 네이버 로그인 */
    implementation 'com.navercorp.nid:oauth-jdk8:5.1.0' // jdk 8

    /** 카카오 로그인 */
    implementation "com.kakao.sdk:v2-user:2.10.0" // 카카오 로그인

    /** 페이스북 SDK */
    implementation 'com.facebook.android:facebook-android-sdk:[8,9)'
    implementation 'com.facebook.android:facebook-login:[8,9)'
    implementation 'com.airbnb.android:lottie:3.7.0'

    /** 구글 서비스 */
    implementation 'com.google.firebase:firebase-auth:21.0.1'
    implementation 'com.google.android.gms:play-services-auth:20.2.0'

    // fcm
    implementation platform('com.google.firebase:firebase-bom:28.4.1')
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-analytics-ktx'

    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-config'

    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'

    // worker
    implementation 'androidx.work:work-runtime:2.5.0'

    // pager indicator
    implementation 'com.tbuonomo:dotsindicator:4.2'

    //Glide
    def glide_version = "4.13.2"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'

    // Room
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    // worker
    def workVersion = "2.4.0"
    implementation "androidx.work:work-runtime-ktx:$workVersion"
}
// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name

    println("----------------------------------------------")
    println("Variant name:      " + variant.name)
    println("Application ID:    " + [variant.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
    println("Build type:        " + variant.buildType.name)
    println("Flavor:            " + variant.flavorName)

    if (buildType == "release" || buildType == "nightly") {
        def baseVersionCode = generatedVersionCode

        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.

        // Our generated version code now has a length of 9 (See tools/gradle/versionCode.gradle).
        // Our x86 builds need a higher version code to avoid installing ARM builds on an x86 device
        // with ARM compatibility mode.

        variant.outputs.each { output ->

            /** 2021.12.23 replace - Now Android Studio tells me that com.android.build.OutputFile is deprecated */
//            def abi = output.getFilter(OutputFile.ABI)
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            // We use the same version code generator, that we inherited from Fennec, across all channels - even on
            // channels that never shipped a Fennec build.

            def versionCodeOverride = baseVersionCode

            if (abi == "x86_64") {
                versionCodeOverride = versionCodeOverride + 3
            } else if (abi == "x86") {
                versionCodeOverride = versionCodeOverride + 2
            } else if (abi == "arm64-v8a") {
                versionCodeOverride = versionCodeOverride + 1
            } else if (abi == "armeabi-v7a") {
                versionCodeOverride = versionCodeOverride + 0
            } else {
                //throw new RuntimeException("Unknown ABI: " + abi)
            }

            output.versionCodeOverride = versionCodeOverride

            println("versionCode for $abi = $versionCodeOverride")
        }
    }
}

// -------------------------------------------------------------------------------------------------
// MLS: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all {
    print("MLS token: ")
    try {
        def token = new File("${rootDir}/.mls_token").text.trim()
        buildConfigField 'String', 'MLS_TOKEN', '"' + token + '"'
        println "(Added from .mls_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'MLS_TOKEN', '""'
        println("X_X")
    }
}

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def variantName = variant.getName()

    print("Adjust token: ")

    if (variantName.contains("Release") && variantName.contains("focus")) {
        try {
            def token = new File("${rootDir}/.adjust_token").text.trim()
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "(Added from .adjust_token file)"
        } catch (FileNotFoundException ignored) {
            if (gradle.hasProperty("localProperties.autosignReleaseWithDebugKey")) {
                buildConfigField 'String', 'ADJUST_TOKEN', '"fake"'
                println("fake - only for local development")
            } else {
                buildConfigField 'String', 'ADJUST_TOKEN', 'null'
                println("X_X")
            }
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("--")
    }
}

// -------------------------------------------------------------------------------------------------
// Sentry: Read token from local file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all {
    print("Sentry token: ")
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', '""'
        println("X_X")
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Focus provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-")
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListDir = 'src/main/java/org/mozilla/focus/generated'
def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.focus.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

if (project.hasProperty("coverage")) {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    android.applicationVariants.all { variant ->
        task "jacoco${variant.name.capitalize()}TestReport"(type: JacocoReport,
                dependsOn: ["test${variant.name.capitalize()}UnitTest"]) {

            reports {
                html.enabled true
                xml.enabled true
            }

            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                              '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
            def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${variant.name}", excludes: fileFilter)
            def javaTree = fileTree(dir: "$project.buildDir/intermediates/classes/${variant.flavorName}/${variant.buildType.name}",
                    excludes: fileFilter)
            def mainSrc = "$project.projectDir/src/main/java"
            sourceDirectories = files([mainSrc])
            classDirectories = files([kotlinTree, javaTree])
            executionData = fileTree(dir: project.buildDir, includes: [
                    "jacoco/test${variant.name.capitalize()}UnitTest.exec", 'outputs/code-coverage/connected/*coverage.ec'
            ])
        }
    }

    android {
        buildTypes {
            debug {
                testCoverageEnabled true
                applicationIdSuffix ".coverage"
            }
        }
    }
}

if (gradle.hasProperty('localProperties.autoPublish.android-components.dir')) {
    ext.acSrcDir = gradle."localProperties.autoPublish.android-components.dir"
    apply from: "../${acSrcDir}/substitute-local-ac.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.application-services.dir')) {
    ext.appServicesSrcDir = gradle."localProperties.autoPublish.application-services.dir"
    apply from: "../${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
}
